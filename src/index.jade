doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title React Workshop

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        h1 React Workshop
        img(src="./images/react.png", style="width: 150px")
        p please update your npm with
        pre
          code.language-javascript.
            npm install npm@latest -g
            
      section
        h2 Agenda
        ul
          li &nbsp;
          li What is React?
          li Quick Start
          li Learn the Basics (Components, State, Event Handling)
          li Unit-Testing
          li State Management
          li Overview - Q&A
          li Beer 🍺🍻

      section
        h2 What is React? 🤔
        ul
          li A Javascript Library for building user interfaces
          li created by facebook and open sourced about three years ago
          li Component Based
          li Unidirectional data flow
          li JSX

      section
        h2 why should i choose react?
        ul
          li easy to learn & natural to use
          li Flux over MVC
          li learn once - use everywhere
          li painless releases
          li awesome gigantic community
          li bunch of useful opensource components

      section
        h2 😴
        img(src="https://media.giphy.com/media/14aVj10D1TwHu0/giphy.gif")

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Let's get started! 🎉💻

      section
        h2 install&nbsp;
          strong create-react-app
        pre
          code.language-javascript.
            npm install -g create-react-app
            create-react-app myfancyfirstapp

      section
        pre
          code.language-javascript.
            class App extends Component {
              render() {
                return (
                  &ltdiv className="App">
                    &ltdiv className="App-header">
                      &ltimg src={logo} className="App-logo" alt="logo" />
                      &lth2>Welcome to React&lt/h2>
                    &lt/div>
                    &ltp className="App-intro">
                      To get started, edit &ltcode>src/App.js&lt/code> and save to reload.
                    &lt/p>
                  &lt/div>
                );
              }
            }
        h2 😨

      section
        h2 delete everything! 🙌
        pre
          code.language-javascript.
            class App extends Component {
              render() {
                return (
                  &ltdiv>Hello World!&lt/div>
                );
              }
            }

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 JSX
        pre
          code.language-javascript.
            function getCompanyElement() {
              var company = "Catalysts";
              return &ltdiv>Hello {company}!&lt/div>
            }

      section
        h2 JSX
        ul
          li javascript syntax extension
          li catch errors already with linter
          li HTML like but not 100% equal
          li also for native development

      section
        img(src="./images/lint_error.png", width="150%;")

      section
        img(src="./images/prettier_error.png", width="150%;")

      section
        h3 HTML in JavaScript
        pre
          code.language-javascript.
            function getCompanyElement() {
              var company = "Catalysts";
              return &ltdiv>Hello {company}!&lt/div>
            }

            render() {
              return (
                &ltdiv>{this.getCompanyElement()}&lt/div>
              )
            }

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Components
        i "Components let you split the UI into independent, reusable pieces, and think about each piece in isolation."
        
      section
        img(src="./images/component_architecture.png", style="width: 100%")

      section
        h2 Components
        ul
          li
            i "Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called "props") and return React elements describing what should appear on the screen."
          li
            pre
              code.language-javascript.
                function Company(props) {
                  return &ltdiv>company: {props.companyname}&lt/div>
                }

      section
        h3 Class Component
        pre
          code.language-javascript.
            import React from 'react';

            class Company extends React.Component {
              render() {
                return (
                  &ltdiv>company: Catalysts&lt/div>
                )
              }
            }

      selection
        h3 Functional Component
        pre
          code.language-javascript.
            function Company(props) {
              return &ltdiv>company: Catalysts&lt/div>
            }

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Why use Class Components? 🤔
        ul
          li &nbsp
          li Lifecycle Hooks & other APIs
          li State

      section
        h3 Lifecycle Hooks
        div(style="text-align: left;")
          code componentWillMount()
          br
          code ❗ componentDidMount()
          br
          code componentWillReceiveProps(nextProps)
          br
          code ❗ shouldComponentUpdate(nextProps, nextState)
          br
          code componentWillUpdate(nextProps, nextState)
          br
          code componentDidUpdate(prevProps, prevState)
          br
          code ❗ componentWillUnmount()

      section
        h3 Component Methods
        code setState()
        code ⛔ forceUpdate() ⛔
        br

        h3 Component Properties
        code props
        code defaultProps
        code displayName
        code state

      section
        h3 Props
        code.language-javascript.
          &ltCompany name="Catalysts"/>
        br
        pre
          code.language-javascript.
            class Company extends React.Component {
              render() {
                return (
                  &ltdiv>company: {this.props.name}&lt/div>
                );
              }
            }

      section
        h3 Functional Components
        code.language-javascript.
          &ltCompany name="Catalysts"/>
        br
        pre
          code.language-javascript.
            function Company({name}) {
              return &ltdiv>company: {name}&lt/div>
            }
            
      section
        h3 ES6 Sugar: Spread Operator
        pre
          code.language-javascript.
            function App1() {
              return &ltGreeting firstName="Ben" lastName="Hector" />;
            }          
            function App2() {
              const props = {firstName: 'Ben', lastName: 'Hector'};
              return &ltGreeting {...props} />;
            }

      section
        h3 PropTypes
        pre
          code.language-javascript.
            Company.propTypes = {
              name: PropTypes.string.isRequired
            }

      section
        pre
          code.language-javascript.
            class Company extends React.Component {
              static propTypes = {
                /* name of the company */
                name: PropTypes.string.isRequired
              }

              render() {
                return (
                  &ltdiv>company: {this.props.name}&lt/div>
                );
              }
            }

      section
        h3 Default props
        pre
          code.language-javascript.
            class Company extends React.Component {
              static propTypes = {
                /* name of the company */
                name: PropTypes.string
              }

              render() {
                return (
                  &ltdiv>company: {this.props.name.toUpperCase()}&lt/div>
                );
              }
            }

            function CompanyList() {
              return &ltCompany/>
            }

      section
        ul
          li
            pre
              code.language-javascript.
                return (
                  &ltdiv>company: {this.props.name ? this.props.name.toUpperCase() : ''}&lt/div>
                );
          li
            pre
              code.language-javascript.
                componentDidMount() {
                  if(this.props.name === undefined){
                    this.props.name = ''
                  }
                }

      section
        h3 use default props ❗
        pre
          code.language-javascript.
            class Company extends React.Component {
              static propTypes = {
                /* name of the company */
                name: PropTypes.string
              }

              static defaultProps = {
                name: 'Catalysts'
              }

              render() {
                return (
                  &ltdiv>company: {this.props.name.toUpperCase()}&lt/div>
                );
              }
            }

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 State
        ul
          li How can I bring my Component to life?
          
      section
        h3 Re-render Components when data changes
        ul
          li <a href="https://www.webpackbin.com/bins/-Kj4MffG215rAsA8tRk3">https://www.webpackbin.com/bins/-Kj4MffG215rAsA8tRk3</a>
          
      section
        h3 Each Component has its own local state
        ul
          li state takes care of re-rendering
          li ReactDOM.render only needs to be called once
          li <br>set the initial state in the constructor
            pre
              code.language-javascript.
                constructor(props) {
                  super(props);
                  this.state = {date: new Date()};
                }

      section
        h3 State is immutable
        ul
          li state-history is more understandable
          li Diffing-algorithm detects changes
          li Only updates the necessary parts of your app/component
        br
        ul
          li Don't modify the state directly!
            pre
              code.language-javascript.
                // Wrong
                this.state.variable = 'abc';
      
      section
        h3 Example diffing-algorithm
        span on state-change, only the affected DOM elements get re-rendered
        img(src="./images/state-change.png", style="width: 100%;margin: 20px;")
                
      section
        h3 How to update the State correctly?
        ul
          li use the setState function
          li but use it wisely! it is not incremental
          li use the "functional" setState
            pre
              code.language-javascript.
                this.setState((prevState, props) => {
                  count: prevState.count + props.increment
                });
                
      section
        h3 Problem when not using the functional approach
        span state is being overridden when being called in the same update-cycle
        pre
          code.language-javascript.
            // assuming state.count === 0
            this.setState({count: state.count + 1});
            this.setState({count: state.count + 1});
            this.setState({count: state.count + 1});
            // state.count === 1, not 3
            
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Conditional Rendering
        
      section
        h3 Rendering content based on a specific condition
        ul
          li Example: a list of employees
            pre
              code.language-javascript.
                render() {
                  return (
                    &ltdiv>
                      &ltul>
                        {this.props.employees.map(employee => {
                          return &ltli key={employee.id}>{employee.name}&lt/li>
                        })}
                      &lt/ul>
                    &lt/div>
                  )
                }
                
      section
        h3 Put the list in a seperate Component
        pre
          code.language-javascript.
            render() {
              return (
                &ltdiv>
                  &ltEmployeeList employees={this.props.employees} />
                &lt/div>
              )
            }
            
      section
        h3 different content when no employees are found
        pre
          code.language-javascript.
            render() {
              let content;         
              if (this.props.employees.length > 0) {
                content = &ltEmployeeList employees={this.props.employees} />
              } else {
                content = &ltspan>No employees found.&lt/span>     
              }
            
              return (
                &ltdiv>
                  {content}
                &lt/div>
              )
            }

      section
        h2 Example
        ul
          li we want to render a company with it's employees. Each company has a logo and a name. Each employee has a name and a job.
          li
            strong Try to create it on you own!

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Container & Presentational Components

      section
        h3 benefits of this approach
        ul
          li &nbsp
          li Better separation of concerns.
          li Better reusability.
          li Presentational components are essentially your app’s “palette”.

      section
        h3 Presentational Component
        pre
          code.language-javascript.
            const Employee = props => {
                return &ltdiv>company: {props.name}&lt/div>
            }

      section
        h3 Container Component
        pre
          code.language-javascript.
            export default class Company extends Component {
              constructor() {
                super();
                this.state = {
                  name: 'Catalysts',
                  logo: 'logo.png',
                  employees: [
                    {
                      name: 'Dominik Sumer',
                      job: 'Software Engineer'
                    },
                    {
                      name: 'David Joech',
                      job: 'Software Engineer'
                    }
                  ]
                };
              }

              render() {
                return (
                  &ltdiv>
                    &ltp>Company Name: {this.state.name}&lt/p>
                    &ltimg src={this.state.logo} />
                    &ltEmployeeList employees={this.state.employees} />
                  &lt/div>
                );
              }
            }

      section
        h2 Presentation Components
        ul
          li Are concerned with how things look
          li Have no dependencies on the rest of the app, such as Flux actions or stores.
          li Receive data and callbacks exclusively via props.
          li Rarely have their own state (when they do, it’s UI state rather than data).
          li Are written as &nbsp
            strong functional components &nbsp
            | unless they need state, lifecycle hooks, or performance optimizations.

      section
        h2 Container Components
        ul
          li Are concerned with how things work.
          li Provide the data and behavior to presentational or other container components.
          li Are often stateful, as they tend to serve as data sources.
          li Are usually generated using higher order components.
            
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Event Handling
        
      section
        h3 Event Examples
        p support for all the html5 events you know
        ul
          li.instant &nbsp;
          li.instant onClick
          li.instant onChange
          li.instant onFocus
          li.instant onSubmit
          li.instant onTouchStart
          li.instant ...
          
      section
        h3 Example button onClick
        pre
          code.language-javascript.
            class App extends Component {
              click(e) {
                console.log(e);
              }
            
              render() {              
                return (
                  &ltdiv>&ltbutton onClick={this.click}>clickme&lt/button>&lt/div>
                );
              }
            }
          
      section
        h3 Correct binding
        pre
          code.language-javascript.
            class App extends Component {
              constructor() {
                this.click = this.click.bind(this);
              }
            
              click(e) {
                console.log(e);
              }
            
              render() {              
                return (
                  &ltdiv>&ltbutton onClick={this.click}>clickme&lt/button>&lt/div>
                );
              }
            }
            
      section
        h3 not recommended to pass a function directly
        pre
          code.language-javascript.
            class App extends Component {            
              render() {              
                return (
                  &ltdiv>&ltbutton onClick={(e) => {console.log(e);}}>clickme&lt/button>&lt/div>
                );
              }
            }
        p creates a new function each render-cycle
          
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Unit Testing
        ul
          li With Jest & Enzyme
          
      section
        h3 Jest
        ul
          li Framework developed by Facebook
          li JavaScript testing in general
          li IntelliJ integration since 2017.1
          li Easy generation of code coverage
        
      section
        h3 Enzyme
        ul
          li Testing utilities for React
          li Developed by AirBnB
          li Different rendering modes for React components
          li Simulate Events in your components
          
      section
        h3 Folder structure
        img(src="./images/folder_structure.png", style="width: 60%;margin:20px")
        
      section
        h3 Write your first test
        pre
          code.language-javascript.
            import React from 'react';
            import {shallow} from 'enzyme';
            import ActionButtons from './ActionButtons';
            
            describe('ActionButtons', () => {
              it('should render submit button correctly', () => {
                const okText = 'OK';
                const component = shallow(&ltActionButtons textOk={okText} />);
                expect(component.find('button[type="submit"]').text()).toBe(okText);
              });
            });
            
      section
        h3 Enzyme Render Modes
        ul
          li shallow
          li mount
          li render
          
      section
        h3 Simulate Events
        pre
          code.language-javascript.
            function MyComponent(props) {
              return &ltdiv>&ltbutton onClick={props.onButtonClick}>ClickMe&lt/button>&lt/div>;
            }
            
            const mockOnClick = jest.fn();
            const wrapper = mount(&ltMyComponent onButtonClick={mockOnClick} />);
            wrapper.find(‘button’).simulate(‘click’);
            expect(mockOnClick).toHaveBeenCalled();

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 State Management

      section
        h3 Why do we need State Mangement Libraries?
        ul
          li &nbsp
          li often you actually doesn't need any external library
          li usually if you application holds more data
          li if you start nesting components

      section
        h3 Whats the problem exactly?
        img(src="./images/state_mangement.png", style="width: 80%")

      section
        h2 How do state mangement libaries solve this problem?

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Redux
        
      section
        img(src="./images/redux_anim.gif", style="width: 80%;background:white;")

      section
        pre
          code.language-json.
            {
              auth: {
                token: '12985sadvASDKALDS1Asdflk350'
              },
              company: {
                name: 'Catalysts',
                employees: [
                  {
                    name: 'Dominik Sumer',
                    job: 'Software Engineer'
                  },
                  {
                    name: 'David Joech',
                    job: 'Software Engineer'
                  }
                ]
              }
            }

      section
        h3 Example
        pre
          code.language-javascript.
            class EmployeeList extends Component {
              render() {
                return (
                  {
                    this.props.employees.map(employee => {
                      return &ltEmployee name={employee.name} job={employee.job}/>
                    })
                  }
                );
              }
            }

            const mapStateToProps = state => {
              employees: state.company.employees
            }

            export default connect(mapStateToProps)(EmployeeList);


      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 MobX

      section
        h3 Example
        pre
          code.language-javascript.
            @observer
            @inject('employees')
            class EmployeeList extends Component {
              render() {
                return (
                  {
                    this.props.employees.get().map(employee => {
                      return &ltEmployee name={employee.name} job={employee.job}/>
                    })
                  }
                );
              }
            }

            export default EmployeeList;

      section
        pre
          code.language-json.
            {
              auth: {
                token: '12985sadvASDKALDS1Asdflk350'
              },
              company: {
                name: 'Catalysts',
                employees: [
                  {
                    name: 'Dominik Sumer',
                    job: 'Software Engineer'
                  },
                  {
                    name: 'David Joech',
                    job: 'Software Engineer'
                  }
                ]
              }
            }

      section
        h2 which one should i use?
        ul
          li &nbsp
          li no one, if you can
          li Redux, for large scale projects with experienced devs
          li MobX, for smaller projects or devs who are new to react

      section
        h2 other useful popular libraries
        ul
          li &nbsp
          li React Router
          li Styled Components
          li FlowType
          li Next.js
          
      section
        h2 Links & helpful Resources
        ul
          li.instant React Docs & Tutorial: <a href="#">https://facebook.github.io/react</a>
          li.instant markerikson's react-redux-links: <a href="#">https://github.com/markerikson/react-redux-links</a>
          li.instant Community on Medium / Twitter
          li.instant <a href="https://www.reactiflux.com/">reactiflux discord channel</a>
          
      section
        h2 React Vienna Meetup
        img(src="./images/react_vienna.jpeg")
        i Join the meetup every month!

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h1 Q&A

      section
        h1 thanks!
        h2 and now let's go and grab some beers! 🍺🍻

    script(src='build/build.js')
