doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title React Workshop

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        h1 React Workshop
        img(src="./images/react.png", style="width: 150px")
        p please update your npm with
        pre
          code.language-javascript.
            npm install npm@latest -g

      section
        h2 What is React? 🤔
        ul
          li A Javascript Library for building user interfaces
          li created by facebook and open sourced about three years ago
          li Component Based
          li Unidirectional data flow
          li JSX

      section
        h2 why should i choose react?
        ul
          li easy to learn & natural to use
          li Flux over MVC
          li JSX
          li learn once - use everywhere
          li painless releases
          li awesome gigantic community
          li bunch of useful opensource components

      section
        h2 😴
        img(src="https://media.giphy.com/media/14aVj10D1TwHu0/giphy.gif")

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Let's get started! 🎉💻

      section
        h2 install&nbsp;
          strong create-react-app
        pre
          code.language-javascript.
            npm install -g create-react-app
            create-react-app myfancyfirstapp

      section
        pre
          code.language-javascript.
            class App extends Component {
              render() {
                return (
                  &ltdiv className="App">
                    &ltdiv className="App-header">
                      &ltimg src={logo} className="App-logo" alt="logo" />
                      &lth2>Welcome to React&lt/h2>
                    &lt/div>
                    &ltp className="App-intro">
                      To get started, edit &ltcode>src/App.js&lt/code> and save to reload.
                    &lt/p>
                  &lt/div>
                );
              }
            }
        h2 😨

      section
        h2 delete everything! 🙌
        pre
          code.language-javascript.
            class App extends Component {
              render() {
                return (
                  &ltdiv>Hello World!&lt/div>
                );
              }
            }

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 JSX
        pre
          code.language-javascript.
            function getCompanyElement() {
              var company = "Catalysts";
              return &ltdiv>Hello {company}!&lt/div>
            }

      section
        h2 JSX
        ul
          li javascript syntax extension
          li catch errors already with linter
          li HTML like but not 100% equal
          li not only for Web also for native development usable
          //- todo: add lint error example

      section
        h2 Components
        ul
          li
            i "Components let you split the UI into independent, reusable pieces, and think about each piece in isolation."
          li
            i "Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called "props") and return React elements describing what should appear on the screen."

      section
        h3 Class Component
        pre
          code.language-javascript.
            import React from 'react';

            class Company extends React.Component {
              render() {
                return (
                  &ltdiv>company: Catalysts&lt/div>
                )
              }
            }

      selection
        h3 Functional Component
        pre
          code.language-javascript.
            function Company(props) {
              return &ltdiv>company: Catalysts&lt/div>
            }


      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Why use Class Components? 🤔
        ul
          li &nbsp
          li Lifecycle Hooks & other APIs
          li State

      section
        h3 Lifecycle Hooks
        div(style="text-align: left;")
          code componentWillMount()
          br
          code ❗ componentDidMount()
          br
          code componentWillReceiveProps(nextProps)
          br
          code ❗ shouldComponentUpdate(nextProps, nextState)
          br
          code componentWillUpdate(nextProps, nextState)
          br
          code componentDidUpdate(prevProps, prevState)
          br
          code componentWillUnmount()

      section
        h3 Component Methods
        code setState()
        code ⛔ forceUpdate() ⛔
        br

        h3 Component Properties
        code props
        code defaultProps
        code displayName
        code state

      section
        h3 Props
        code.language-javascript.
          &ltCompany name="Catalysts"/>
        br
        pre
          code.language-javascript.
            class Company extends React.Component {
              render() {
                return (
                  &ltdiv>company: {this.props.name}&lt/div>
                );
              }
            }

      section
        h3 Functional Components
        code.language-javascript.
          &ltCompany name="Catalysts"/>
        br
        pre
          code.language-javascript.
            function Company({name}}) {
              return &ltdiv>company: {name}}&lt/div>
            }

      section
        h3 PropTypes
        pre
          code.language-javascript.
            Company.propTypes = {
              name: PropTypes.string.isRequired
            }

      section
        pre
          code.language-javascript.
            class Company extends React.Component {
              static propTypes = {
                /* name of the company */
                name: PropTypes.string.isRequired
              }

              render() {
                return (
                  &ltdiv>company: {this.props.name}&lt/div>
                );
              }
            }

      section
        h3 Default props
        pre
          code.language-javascript.
            class Company extends React.Component {
              static propTypes = {
                /* name of the company */
                name: PropTypes.string
              }

              render() {
                return (
                  &ltdiv>company: {this.props.name.toUpperCase()}&lt/div>
                );
              }
            }

            function CompanyList() {
              return &ltCompany/>
            }

      section
        ul
          li
            pre
              code.language-javascript.
                return (
                  &ltdiv>company: {this.props.name ? this.props.name.toUpperCase() : ''}&lt/div>
                );
          li
            pre
              code.language-javascript.
                componentDidMount() {
                  if(this.props.name === undefined){
                    this.props.name = ''
                  }
                }

      section
        h3 use default props ❗
        pre
          code.language-javascript.
            class Company extends React.Component {
              static propTypes = {
                /* name of the company */
                name: PropTypes.string
              }

              static defaultProps = {
                name: 'Catalysts'
              }

              render() {
                return (
                  &ltdiv>company: {this.props.name.toUpperCase()}&lt/div>
                );
              }
            }

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 State
        ul
          li How can I bring my Component to life?
          
      section
        h3 Each Component has its own State
          
      section
        h3 State is immutable
        ul
          li Update-algorithm detects changes
          li Only updates the necessary parts of your app/component
        br
        ul
          li Don't modify the state directly!
            pre
              code.language-javascript.
                // Wrong
                this.state.variable = 'abc';
                
      section
        h3 How to update the State correctly?
        ul
          li &nbsp;

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Container & Presentational Components

      section
        h3 benefits of this approach
        ul
          li &nbsp
          li Better separation of concerns.
          li Better reusability.
          li Presentational components are essentially your app’s “palette”.

      section
        h3 Presentational Component
        pre
          code.language-javascript.
            class Company extends React.Component {
              render() {
                return (
                  &ltdiv>company: {this.props.name.toUpperCase()}&lt/div>
                );
              }
            }

      section
        //- TODO: test me !!
        h3 Container Component
        pre
          code.language-javascript.
            class CompanyList extends React.Component {
              constructor() {
                super();
                this.state = {
                  companies: [{
                    name: 'Catalysts'
                  }, {
                    name: 'Google'
                  }]
                }
              }
              render() {
                return (
                  &ltdiv>
                    {
                      this.state.companies.map(company => {
                        return &ltCompany name={company.name}/>
                      })
                    }
                  &lt/div>
                );
              }
            }

      section
        h2 Presentation Components
        ul
          li Are concerned with how things look
          li Have no dependencies on the rest of the app, such as Flux actions or stores.
          li Receive data and callbacks exclusively via props.
          li Rarely have their own state (when they do, it’s UI state rather than data).
          li Are written as &nbsp
            strong functional components &nbsp
            | unless they need state, lifecycle hooks, or performance optimizations.

      section
        h3 Presentational Component
        pre
          code.language-javascript.
            function Company({name}}) {
              return &ltdiv>company: {name}}&lt/div>
            }

      section
        h2 Container Components
        ul
          li Are concerned with how things work.
          li Provide the data and behavior to presentational or other container components.
          li Are often stateful, as they tend to serve as data sources.
          li Are usually generated using higher order components.

    script(src='build/build.js')
